{"/home/travis/build/npmtest/node-npmtest-grunt-combine-media-queries/test.js":"/* istanbul instrument in package npmtest_grunt_combine_media_queries */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-combine-media-queries/lib.npmtest_grunt_combine_media_queries.js":"/* istanbul instrument in package npmtest_grunt_combine_media_queries */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_combine_media_queries = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_combine_media_queries = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-combine-media-queries/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-combine-media-queries && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_combine_media_queries */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_combine_media_queries\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_combine_media_queries.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_combine_media_queries.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_combine_media_queries.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_combine_media_queries.__dirname + '/lib.npmtest_grunt_combine_media_queries.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-combine-media-queries/node_modules/grunt-combine-media-queries/Gruntfile.js":"/*\n * grunt-combine-media-queries\n * https://github.com/buildingblocks/grunt-combine-media-queries\n *\n * Copyright (c) 2013 John Cashmore\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  grunt.initConfig({\n    jshint: {\n      all: ['Gruntfile.js', 'tasks/*.js'],\n      options: {\n        jshintrc: '.jshintrc'\n      },\n    },\n    clean: {\n      tests: ['tmp']\n    },\n    cmq: {\n      options: {\n        log: true\n      },\n      your_target: {\n        files: {\n          'tmp': ['test/test3.css']\n        }\n      },\n      dynamic: {\n        expand: true,\n        cwd: 'test/',\n        src: ['*.css'],\n        dest: 'tmp/'\n      }\n    }\n\n  });\n\n  grunt.loadTasks('tasks');\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-release');\n  grunt.registerTask('default', ['clean', 'jshint', 'cmq']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-combine-media-queries/node_modules/grunt-combine-media-queries/tasks/combine-media-queries.js":"/*\n * grunt-combine-media-queries\n * https://github.com/buildingblocks/grunt-combine-media-queries\n *\n * Copyright (c) 2013 John Cashmore\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  grunt.registerMultiTask('cmq', 'Find duplicate media queries and combines them.', function() {\n\n    // Require stuff\n    var parseCss = require('css-parse');\n    var path = require('path');\n    var error = true;\n\n    // Default options\n    var options = this.options({\n      log: false,\n      ext: false\n    });\n\n    // Log info only when 'options.log' is set to true\n    var log = function(message){\n      if (options.log){\n        grunt.log.writeln(message);\n      }\n    };\n\n    // Process media queries\n    var processImportURL = function(importURL) {\n      var strCss = '';\n      strCss += '@import ' + importURL.import + ';';\n      return strCss;\n    };\n\n    // Process comments\n    var processComment = function(comment) {\n      var strCss = '/*' + comment.comment + '*/';\n      return strCss;\n    };\n\n    // Process declaration\n    var processDeclaration = function(declaration) {\n      var strCss = declaration.property + ': ' + declaration.value + ';';\n      return strCss;\n    };\n\n    // Check declarations type\n    var commentOrDeclaration = function(declarations) {\n      var strCss = '';\n      if(declarations.type === 'declaration'){\n        strCss += '\\n\\t' + processDeclaration(declarations);\n      } else if(declarations.type === 'comment'){\n        strCss += ' ' + processComment(declarations);\n      }\n      return strCss;\n    };\n\n    // Process normal CSS rule\n    var processRule = function(rule) {\n      var strCss = '';\n      strCss += rule.selectors.join(',\\n') + ' {';\n      rule.declarations.forEach(function (rules) {\n        strCss += commentOrDeclaration(rules);\n      });\n      strCss += '\\n}\\n\\n';\n      return strCss;\n    };\n\n    // Check rule type\n    var commentOrRule = function(rule) {\n      var strCss = '';\n      if (rule.type === 'rule') {\n        strCss += processRule(rule);\n      } else if (rule.type === 'comment') {\n        strCss += processComment(rule) + '\\n\\n';\n      }\n      return strCss;\n    };\n\n    // Check keyframe type\n    var commentOrKeyframe = function(frame){\n      var strCss = '';\n      if (frame.type === 'keyframe'){\n        strCss += frame.values.join(',') + ' {';\n        frame.declarations.forEach(function (declaration) {\n          strCss += commentOrDeclaration(declaration);\n        });\n        strCss += '\\n}\\n\\n';\n      } else if (frame.type === 'comment'){\n        strCss += processComment(frame) + '\\n\\n';\n      }\n      return strCss;\n    };\n\n    // Process media queries\n    var processMedia = function(media) {\n      var strCss = '';\n      strCss += '@media ' + media.rule + ' {\\n\\n';\n      media.rules.forEach(function (rule) {\n        strCss += commentOrRule(rule);\n      });\n      strCss += '}\\n\\n';\n      log('@media ' + media.rule);\n\n      return strCss;\n    };\n\n    // Process keyframes\n    var processKeyframes = function(key) {\n      var strCss = '';\n      strCss += '@' + (typeof key.vendor !=='undefined'? key.vendor: '') + 'keyframes ' + key.name + ' {\\n\\n';\n      key.keyframes.forEach(function (keyframe) {\n        strCss += commentOrKeyframe(keyframe);\n      });\n      strCss += '}\\n\\n';\n\n      return strCss;\n    };\n\n    this.files.forEach(function(f) {\n\n      f.src.forEach(function (filepath) {\n\n        error = false;\n\n        log('\\nFile ' + filepath + ' found.');\n\n        var destpath = f.dest;\n        var filename = filepath.replace(/(.*)\\//gi, '');\n\n        if (destpath.indexOf(filename) === -1) {\n          destpath = path.join(f.dest, filename);\n        }\n\n        var source = grunt.file.read(filepath);\n        var cssJson = parseCss(source);\n        var strStyles = '';\n        var processedCSS = {};\n        processedCSS.importURL = [];\n        processedCSS.base = [];\n        processedCSS.media = [];\n        processedCSS.media.all = [];\n        processedCSS.media.minWidth = [];\n        processedCSS.media.maxWidth = [];\n        processedCSS.media.minHeight = [];\n        processedCSS.media.maxHeight = [];\n        processedCSS.media.print = [];\n        processedCSS.media.blank = [];\n        processedCSS.keyframes = [];\n\n        grunt.file.write(destpath, cssJson);\n\n        // For every rule in the stylesheet...\n        cssJson.stylesheet.rules.forEach( function (rule) {\n          // if the rule is a media query...\n          if (rule.type === 'media') {\n\n            // Create 'id' based on the query (stripped from spaces and dashes etc.)\n            var strMedia = rule.media.replace(/[^A-Za-z0-9]/ig,'');\n\n            // Create an array with all the media queries with the same 'id'\n            var item = processedCSS.media.filter(function (element) {\n              return (element.val === strMedia);\n            });\n\n            // If there are no media queries in the array, define details\n            if (item.length < 1) {\n              var mediaObj = {};\n              mediaObj.sortVal = parseFloat(rule.media.match( /\\d+/g ));\n              mediaObj.rule = rule.media;\n              mediaObj.val = strMedia;\n              mediaObj.rules = [];\n\n              processedCSS.media.push(mediaObj);\n            }\n\n            // Compare the query to other queries\n            var i = 0, matched = false;\n            processedCSS.media.forEach(function (elm) {\n              if (elm.val === strMedia) {\n                matched = true;\n              }\n              if (!matched) {i++;}\n            });\n\n            // Push every merged query\n            rule.rules.forEach(function (mediaRule) {\n              if (mediaRule.type === 'rule' || 'comment' ) {\n                processedCSS.media[i].rules.push(mediaRule);\n              }\n            });\n\n          } else if (rule.type === 'keyframes') {\n            processedCSS.keyframes.push(rule);\n\n          } else if (rule.type === 'import') {\n            processedCSS.importURL.push(rule);\n\n          } else if (rule.type === 'rule' || 'comment') {\n            processedCSS.base.push(rule);\n\n          }\n        });\n\n        // Sort media queries by kind, this is needed to output them in the right order\n        processedCSS.media.forEach(function (item) {\n          if (item.rule.match( /min-width/ )){\n            processedCSS.media.minWidth.push(item);\n          } else if (item.rule.match( /min-height/ )){\n            processedCSS.media.minHeight.push(item);\n          } else if (item.rule.match( /max-width/ )){\n            processedCSS.media.maxWidth.push(item);\n          } else if (item.rule.match( /max-height/ )){\n            processedCSS.media.maxHeight.push(item);\n          } else if (item.rule.match( /print/ )){\n            processedCSS.media.print.push(item);\n          } else if (item.rule.match( /all/ )){\n            processedCSS.media.all.push(item);\n          } else {\n            processedCSS.media.blank.push(item);\n          }\n        });\n\n        // Function to determine sort order\n        var determineSortOrder = function(a, b, isMax) {\n          var sortValA = a.sortVal,\n              sortValB = b.sortVal;\n              isMax = typeof isMax !== 'undefined' ? isMax : false;\n\n          // consider print for sorting if sortVals are equal\n          if (sortValA === sortValB) {\n            if (a.rule.match( /print/ )) {\n              // a contains print and should be sorted after b\n              return 1;\n            }\n            if (b.rule.match( /print/ )) {\n              // b contains print and should be sorted after a\n              return -1;\n            }\n          }\n\n          // return descending sort order for max-(width|height) media queries\n          if (isMax) { return sortValB-sortValA; }\n\n          // return ascending sort order\n          return sortValA-sortValB;\n        };\n\n        // Sort media.all queries ascending\n        processedCSS.media.all.sort(function(a,b){\n          return determineSortOrder(a, b);\n        });\n\n        // Sort media.minWidth queries ascending\n        processedCSS.media.minWidth.sort(function(a,b){\n          return determineSortOrder(a, b);\n        });\n\n        // Sort media.minHeight queries ascending\n        processedCSS.media.minHeight.sort(function(a,b){\n          return determineSortOrder(a, b);\n        });\n\n        // Sort media.maxWidth queries descending\n        processedCSS.media.maxWidth.sort(function(a,b){\n          return determineSortOrder(a, b, true);\n        });\n\n        // Sort media.maxHeight queries descending\n        processedCSS.media.maxHeight.sort(function(a,b){\n          return determineSortOrder(a, b, true);\n        });\n\n        // Function to output base CSS\n        var outputBase = function(base){\n          base.forEach(function (rule) {\n            strStyles += commentOrRule(rule);\n          });\n        };\n\n        // Function to import URL\n        var outputImportURL = function(importURL){\n          importURL.forEach(function(item){\n            strStyles += processImportURL(item);\n          });\n        };\n\n        // Function to output media queries\n        var outputMedia = function(media){\n          media.forEach(function(item){\n            strStyles += processMedia(item);\n          });\n        };\n\n        // Function to output keyframes\n        var outputKeyFrames = function(keyframes){\n          keyframes.forEach(function (keyframe) {\n            strStyles += processKeyframes(keyframe);\n          });\n        };\n\n        // Check if import URL was processed\n        if (processedCSS.importURL.length !== 0){\n          outputImportURL(processedCSS.importURL);\n        }\n\n        // Check if base CSS was processed and print them\n        if (processedCSS.base.length !== 0){\n          outputBase(processedCSS.base);\n        }\n\n        // Check if media queries were processed and print them in order\n        if (processedCSS.media.length !== 0){\n          log('\\nProcessed media queries:');\n          outputMedia(processedCSS.media.blank);\n          outputMedia(processedCSS.media.all);\n          outputMedia(processedCSS.media.minWidth);\n          outputMedia(processedCSS.media.minHeight);\n          outputMedia(processedCSS.media.maxWidth);\n          outputMedia(processedCSS.media.maxHeight);\n          outputMedia(processedCSS.media.print);\n          log('');\n        }\n\n        // Check if keyframes were processed and print them\n        if (processedCSS.keyframes.length !== 0){\n          outputKeyFrames(processedCSS.keyframes);\n        }\n\n        // Define the new file extension\n        if( options.ext ){\n          destpath = destpath.replace( /\\.(.*)/ , options.ext);\n        }\n\n        // Normalize line endings\n        strStyles = grunt.util.normalizelf(strStyles);\n\n        // Write the new file\n        grunt.file.write(destpath, strStyles);\n        grunt.log.ok('File ' + destpath + ' created.');\n\n      });\n\n      if(error){\n        grunt.fatal('No files found');\n      }\n\n    });\n\n  });\n\n};\n"}